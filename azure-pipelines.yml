# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '12.x'
  displayName: 'Install Node.js'

- script: |
    npm run install-client
    npm run test-coverage-client
  displayName: 'Run Tests for wc-guest-management.client'
  timeoutInMinutes: 5

- script: |
    npm run install-api
    npm run test-coverage-api
  displayName: 'Run Tests for wc-guest-management.api'
  timeoutInMinutes: 5

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: './test-report.xml'
    searchFolder: '$(System.DefaultWorkingDirectory)/wc-guest-management.client'
    failTaskOnFailedTests: true
  displayName: 'Publish Test Results - Client'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: $(System.DefaultWorkingDirectory)/wc-guest-management.client/coverage/cobertura-coverage.xml
  displayName: 'Publish Test Coverage - Client'

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: './test-report.xml'
    searchFolder: '$(System.DefaultWorkingDirectory)/wc-guest-management.api'
    failTaskOnFailedTests: true
  displayName: 'Publish Test Results - Api'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: $(System.DefaultWorkingDirectory)/wc-guest-management.api/coverage/cobertura-coverage.xml
  displayName: 'Publish Test Coverage - Api'
